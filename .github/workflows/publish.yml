# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: "Golem's Github npm package registry publisher"
on:
  workflow_call:
      secrets:
        token:
          required: true
  
jobs:
  publish-gpr:
    # needs: build
    name: Publish to NPM github packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: | 
          if [[ -z "${{ secrets.token }}" ]]; then
            echo "GITHUB_TOKEN is not set. Aborting."
            exit 1
          fi
          ORG="${{ github.event.organization.login }}"
          cd sdk/JS/ || { echo "Directory change failed"; exit 1; }

          # Setup npm for publishing
          touch .npmrc
          npm config set registry https://npm.pkg.github.com
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.token }}" >> .npmrc
          echo "@$ORG:registry=https://npm.pkg.github.com" >> .npmrc

          # Login and publish the package
          npm login --scope=@$(echo $ORG) --auth-type=legacy
          echo ""

          VERSION=$(cat ../../VERSION)
          echo "Current VERSION: $VERSION"

          # Extract the last numeric part of the version
          LAST_VERSION=$(echo "$VERSION" | grep -Eo "[0-9]+$" || echo "")
          PACKAGE_NAME=$(jq -r '.name' package.json)
          ORGINAL_PACKAGE_NAME=$PACKAGE_NAME
          PACKAGE_NAME=@$ORG/$PACKAGE_NAME

          if [[ -z "$LAST_VERSION" ]]; then
            echo "Version is not ending with numeric. Proceeding with initialization or incrementing version."

            # Define the array as a string getting all versions of the package
            echo "GETTING VERSIONS OF PACKAGE: $PACKAGE_NAME"

            # Fetch versions with error handling
            RESPONSE=$(npm view $PACKAGE_NAME versions --json || echo "")

            # Check if the response contains an error
            if echo "$RESPONSE" | grep -q '"error"'; then
              # Extract error code
              ERROR_CODE=$(echo "$RESPONSE" | jq -r '.error.code')
              
              if [[ "$ERROR_CODE" == "E404" ]]; then
                echo "Package not found. Proceeding with new version initialization."
                VERSION="${VERSION}.1"
              else
                echo "Error occurred: $RESPONSE"
                exit 1
              fi
            else
              # Handle the case where RESPONSE is valid JSON but without errors
              FILTERED_VERSIONS=$(echo "$RESPONSE" | jq -r '.[]' | grep "^${VERSION}")
              echo "FILTERED_VERSIONS: \n$FILTERED_VERSIONS"

              # Find the highest version from the filtered list
              HIGHEST_VERSION=$(echo "$FILTERED_VERSIONS" | sort -V | tail -n 1)

              echo "Highest version starting with $VERSION: $HIGHEST_VERSION"
               if [[ -z "$HIGHEST_VERSION" ]]; then
                VERSION="${VERSION}.1"
              else
                  VERSION=$(echo "$HIGHEST_VERSION" | sed -E 's/(.*[^0-9])([0-9]+)([^0-9]*)$/echo "\1$((\2+1))\3"/e')
              fi
            fi
          else
            echo "LAST_VERSION found"
            # Increment the last numeric part of the version
            VERSION=$(echo "$VERSION" | sed -E 's/(.*[^0-9])([0-9]+)$/echo "\1$((\2+1))"/e')
          fi

          echo "New VERSION: $VERSION"

          # Update the version in package.json
          jq --arg VERSION "$VERSION" '.version = $VERSION' package.json > temp.json && mv temp.json package.json
          sed -i -e 's/"name": "$ORGINAL_PACKAGE_NAME"/"name": "$PACKAGE_NAME"/g' package.json
          # sed -i -e 's/"name": "$ORGINAL_PACKAGE_NAME"/"name": "$PACKAGE_NAME"/g' package-lock.json

          cat package.json

          npm publish --access public


